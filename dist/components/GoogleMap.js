"use strict";var d=Object.defineProperty;var l=(o,e,r)=>e in o?d(o,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[e]=r;var s=(o,e,r)=>(l(o,typeof e!="symbol"?e+"":e,r),r);Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const y=require("react/jsx-runtime"),g=require("../browser-99223509.cjs"),T=require("react"),t=require("../index-5d68b4f3.cjs"),a=require("../utils/MapChildHelper.js"),n=require("../constants-c61a5d3d.cjs");class p extends T.PureComponent{fitBounds(...e){return this.context[n.MAP].fitBounds(...e)}panBy(...e){return this.context[n.MAP].panBy(...e)}panTo(...e){return this.context[n.MAP].panTo(...e)}panToBounds(...e){return this.context[n.MAP].panToBounds(...e)}constructor(e,r){super(e,r),g.invariant(!!this.context[n.MAP],"Did you wrap <GoogleMap> component with withGoogleMap() HOC?"),a.construct(u.propTypes,c,this.props,this.context[n.MAP])}componentDidMount(){a.componentDidMount(this,this.context[n.MAP],i)}componentDidUpdate(e){a.componentDidUpdate(this,this.context[n.MAP],i,c,e)}componentWillUnmount(){a.componentWillUnmount(this)}render(){const{children:e}=this.props;return y.jsx("div",{children:e})}getBounds(){return this.context[n.MAP].getBounds()}getCenter(){return this.context[n.MAP].getCenter()}getClickableIcons(){return this.context[n.MAP].getClickableIcons()}getDiv(){return this.context[n.MAP].getDiv()}getHeading(){return this.context[n.MAP].getHeading()}getMapTypeId(){return this.context[n.MAP].getMapTypeId()}getProjection(){return this.context[n.MAP].getProjection()}getStreetView(){return this.context[n.MAP].getStreetView()}getTilt(){return this.context[n.MAP].getTilt()}getZoom(){return this.context[n.MAP].getZoom()}}s(p,"displayName","GoogleMap"),s(p,"propTypes",{defaultExtraMapTypes:t.PropTypes.arrayOf(t.PropTypes.arrayOf(t.PropTypes.any)),defaultCenter:t.PropTypes.any,defaultClickableIcons:t.PropTypes.bool,defaultHeading:t.PropTypes.number,defaultMapTypeId:t.PropTypes.any,defaultOptions:t.PropTypes.any,defaultStreetView:t.PropTypes.any,defaultTilt:t.PropTypes.number,defaultZoom:t.PropTypes.number,center:t.PropTypes.any,clickableIcons:t.PropTypes.bool,heading:t.PropTypes.number,mapTypeId:t.PropTypes.any,options:t.PropTypes.any,streetView:t.PropTypes.any,tilt:t.PropTypes.number,zoom:t.PropTypes.number,onDblClick:t.PropTypes.func,onDragEnd:t.PropTypes.func,onDragStart:t.PropTypes.func,onMapTypeIdChanged:t.PropTypes.func,onMouseMove:t.PropTypes.func,onMouseOut:t.PropTypes.func,onMouseOver:t.PropTypes.func,onRightClick:t.PropTypes.func,onTilesLoaded:t.PropTypes.func,onBoundsChanged:t.PropTypes.func,onCenterChanged:t.PropTypes.func,onClick:t.PropTypes.func,onDrag:t.PropTypes.func,onHeadingChanged:t.PropTypes.func,onIdle:t.PropTypes.func,onProjectionChanged:t.PropTypes.func,onResize:t.PropTypes.func,onTiltChanged:t.PropTypes.func,onZoomChanged:t.PropTypes.func}),s(p,"contextTypes",{[n.MAP]:t.PropTypes.object});const u=p,i={onDblClick:"dblclick",onDragEnd:"dragend",onDragStart:"dragstart",onMapTypeIdChanged:"maptypeid_changed",onMouseMove:"mousemove",onMouseOut:"mouseout",onMouseOver:"mouseover",onRightClick:"rightclick",onTilesLoaded:"tilesloaded",onBoundsChanged:"bounds_changed",onCenterChanged:"center_changed",onClick:"click",onDrag:"drag",onHeadingChanged:"heading_changed",onIdle:"idle",onProjectionChanged:"projection_changed",onResize:"resize",onTiltChanged:"tilt_changed",onZoomChanged:"zoom_changed"},c={extraMapTypes(o,e){e.forEach(r=>o.mapTypes.set(...r))},center(o,e){o.setCenter(e)},clickableIcons(o,e){o.setClickableIcons(e)},heading(o,e){o.setHeading(e)},mapTypeId(o,e){o.setMapTypeId(e)},options(o,e){o.setOptions(e)},streetView(o,e){o.setStreetView(e)},tilt(o,e){o.setTilt(e)},zoom(o,e){o.setZoom(e)}};exports.GoogleMap=u;exports.Map=p;exports.default=p;
