"use strict";var d=Object.defineProperty;var h=(t,e,n)=>e in t?d(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n;var r=(t,e,n)=>(h(t,typeof e!="symbol"?e+"":e,n),n);Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const a=require("react/jsx-runtime"),g=require("./browser-99223509.cjs");require("./lodash-6bb8d3a5.cjs");const l=require("./index-5d68b4f3.cjs"),s=require("react"),M=require("./browser-4026cc69.cjs"),p=require("./constants-c61a5d3d.cjs");function u(t){class e extends s.PureComponent{constructor(){super(...arguments);r(this,"state",{map:null});r(this,"handleComponentMount",o=>{if(this.state.map||o===null)return;M.warning(typeof google<"u",`Make sure you've put a <script> tag in your <head> element to load Google Maps JavaScript API v3.
 If you're looking for built-in support to load it for you, use the "async/ScriptjsLoader" instead.
 See https://github.com/tomchentw/react-google-maps/pull/168`);const i=new google.maps.Map(o);this.setState({map:i})})}getChildContext(){return{[p.MAP]:this.state.map}}componentWillMount(){const{containerElement:o,mapElement:i}=this.props;g.invariant(!!o&&!!i,"Required props containerElement or mapElement is missing. You need to provide both of them.\n The `google.maps.Map` instance will be initialized on mapElement and it's wrapped by containerElement.\nYou need to provide both of them since Google Map requires the DOM to have height when initialized.")}render(){const{containerElement:o,mapElement:i,...c}=this.props,{map:m}=this.state;return m?s.cloneElement(o,{},s.cloneElement(i,{ref:this.handleComponentMount}),a.jsx("div",{children:a.jsx(t,{...c})})):s.cloneElement(o,{},s.cloneElement(i,{ref:this.handleComponentMount}),a.jsx("div",{}))}}return r(e,"displayName",`withGoogleMap(${t.displayName||t.name})`),r(e,"propTypes",{containerElement:l.PropTypes.node.isRequired,mapElement:l.PropTypes.node.isRequired}),r(e,"childContextTypes",{[p.MAP]:l.PropTypes.object}),e}exports.default=u;exports.withGoogleMap=u;
